require 'pry-byebug'
require 'benchmark'
require 'set'

# str1, str2 = STDIN.read.split("\n")

# test # 2
# => O9C <--- result
# => S4g <--- but this works too
str1 = 'r0I9ApIjCApwv96pzTtKDQCUUjzS4graebhgHdzgH9MvHZrwcKn1A23xSObg0DF4XlSF8p9WnhFVmUKcKVB59Fmhq5OKGfQio8Gj8Gra2klmkehlyv90zKqZV3nxXffCbdsrzlWbysRuz7ksdHsP4bOUUx8huWkrwwVLyZM3sFIv7U6j0EHDxVHzv3B6ykFZfdBgCHLX5Btq56Y1gLpz5SuQCcSSGzLOZehWYftDivEQppDOCjfC9BYxohyDYPSXCy5YdoFYw8FLhuLaeFAmdDcRXCJHdbLU0jcvR6rq3vkJMz4DG2SRDdenjds7Br9k7OfuBcjC0gL0Hfrq0RWlo17gL7aNleMi0B1UINYPsCjrDETsl0PVezYGEUdOBTPbvZf3XZqYZE4xZUWz98Cd9kjh09XoyYFHBDZMN5RKDRjL8UT7TmgkKykLVuWnvvyPZ3AeHWpi31FRc9GaKdUxGTxRO7lIhMyRONRowPz7ppgxas0T3YHkxEDENFtYLZbxoOqEyThwDKzBvDBFP4SRlLilOnrnax9O86dZ4HmWgTNp5UIU3PfpcgxsaGKd9bR8fv9yyWyJe8895FVzIcbcGlHjezz4cam4XD14MxoUIwucp1s8A8hm6EO0Nqew08FkGxJD8NfUxDSeZNhusnw1hdXzSvRo29V9aki0bM1iW2blyTSpeqYgqxcXkdfnEcZZmBvtB2990A53S6x1RTXPqMx9ZPKTR4gcmqh9U6PmJD3dHwluCtuX2Hm3R774b0dSo2JnmZmqhPwgSUpwXtGBlICVNMf2qRfqIkksgQXZLV2kiZCLJwpgSRVuIW1PCaNkFZqhkj8SuFBW3GuLBnWwkWHaylo63hu0bepHTqmpop3e4XJ15qZAMal5clS6cSTVX2zNXkZjLZVSlgURbqmxuU94IdO9COVCoyRBXPfMIaABS3Ugqpgw3NSPQ7P19Tibas8DA70tOtyEvqBsdonnP5UUzOf1baliY5DH5PFrHQgH1IeWa1Aja0RJ00I34Jsc'
str2 = 'VtVCT9h5rGT1eaUsQEDI4KtsWyaZgk6NbgrAEI3Fr78fHPoh3ozU37dOR7nrH6dB6mNeVtrjaurIbldoVnmqppyBIwwJ8pUACqyZCpCI2SyA4algdrOHtIDWcYuG909KqJJn5Msbd5doIahLAohwvuIzkgOwPJ97UOXT9eBaV78skEgkQ7cN2JNOu5kpbSUCtYC5HCCymg6ErULgOpxQOVeoqr9KLxwliaVJ57vdAagJX0C416i4dddGhXm8eJrPHZG0tMCbX2KHwh4jxe6dGkgokJ4GUNZH6F7yIgQmU2ZDdvM48u65MAezNnhkUt8szT3sldNiEi70unGwxYmNzjUxxSrapYx84ITyA7PB26a4VvtbyovLuFPnqgqerMmMwfGnARFPJkW3pLXWqR2EkTSVWd13gztXVfvhiTfJU3SCodlD8gf2MddMwPNipmygSsZ2VErWP2hiWFEYugAj6EmqV3ID9vV0bgaOYaHfNoiGAoTwyhc6ySqwQpKqPSt3vEiTwdo2iALXtCOl4wdeeq9P8Yj4Vncnl6j7WezczZ613piZsQPutnAQHXOVyh0HT9mVqPyqO9CLHwt1tiqvSDjoPWuHYUwTqt94fRCwxOuWevJQiirJ21T26BhexlKnqm7MLEd4pRjBdHk9t6eomr2M6t5miWRoro6VPzIp06UInRrf5DZu0D0PAcArQVq6xrY6Z2MjbBXXBhJt0Xndh7abq0Qf7S4gHNmBXehrMVrhqsM7YVTbvqzioFUIXypcnH2pdyeEatbu4nXRvnAjyYDFRg0SSJyi8yPL0VDqmZgz3pwL5aJKb78GL57GoOdad1e0baOtslfHrI4ZgoYeP5xFHqRM9ZsAgK9YjlD0TTJed3bXUvOncWmJPhL0sI4wJ792nr8BUayijehP5p2D6tYF0FiunjANLtOYmIJ1x7hNJgXkwAYRBgWNk4M3hBWkyCYNNZWUtytbmRclVzbWvVMaKWUjAU5W2tYbK6CDJy5BvVrHYm2kvtEJzqHZU9MF'

# test # 5
# => GZiy
# => qywp
# str1 = ''
# str2 = ''

def f(str1, str2)
  # commented length restriction to calculate for long case
  return '' if str1.length.zero? #|| str1.length > 4096
  return '' if str2.length.zero? #|| str2.length > 4096

  return str1 if (str1 <=> str2) == 0
  # найти все общие вхождения в виде массива
  # сделать из массива строку
  # сделать словарь из этой строки (из все общих символов)
  # найти вхождения из словаря в строке№2
  set1 = str1.split('').to_set
  set2 = str2.split('').to_set
  list_of_intersectional_chars = set1.intersection(set2)
  intersectional_string = list_of_intersectional_chars.to_a.join('')
  intersectional_string.insert(0, '[')
  intersectional_string.insert(-1, ']')

  regexp = Regexp.new(intersectional_string)
  str1_intersections_only = str1.scan(regexp).join('')

  sl = (1..str1_intersections_only.length).to_a.reverse
  sl.slice!(0)

  for n in sl do
    for i in 0..(str1_intersections_only.length) do
      if (str1_intersections_only.length - n) > i
        return str1_intersections_only[i, n] if str2.include?(str1_intersections_only[i, n])
      end
    end
  end
end

puts f(str1, str2)
puts Benchmark.measure { f(str1, str2) }
